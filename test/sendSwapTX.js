const { expect, assert } = require("chai");
const { ethers, waffle } = require("hardhat");
require("dotenv").config();

const {
  addressFactory, // Uniswap V2 Factory Contract address on ETH mainnet
  addressRouter, // Uniswap V2 Router02 Contract address on ETH mainnet
  addressFrom, // WETH Contract address on ETH mainnet
  addressTo, // SUSHI Contract address on ETH mainnet
} = require("../utils/AddressList");

const {
  erc20ABI,
  factoryABI, // ABI for Uniswap V2 Factory Contract
  routerABI, // ABI for Uniswap V2 Router Contract
} = require("../utils/AbiList");

describe("Read and Write to the Blockchain", () => {
  let provider, contractFactory, contractRouter, contractToken, amountIn;

  before(async () => {
    // connecting to provider
    provider = new ethers.providers.JsonRpcProvider(process.env.ALCHEMY_URL); // provider connecting to ETH mainnet

    // contract objects
    contractFactory = new ethers.Contract(addressFactory, factoryABI, provider);
    contractRouter = new ethers.Contract(addressRouter, routerABI, provider);
    contractToken = new ethers.Contract(addressFrom, erc20ABI, provider);

    // Check chain ID
    const network = await provider.getNetwork();
    console.log(`Chain ID: ${network.chainId}`);
  });

  // get price information
  const getAmountOut = async () => {
    const amountsOut = await contractRouter.getAmountsOut(amountIn, [
      addressFrom,
      addressTo,
    ]);
    return amountsOut[1].toString();
  };

  beforeEach(async function () {
    const decimals = await contractToken.decimals();
    const amountInHuman = "1";
    amountIn = ethers.utils.parseUnits(amountInHuman, decimals).toString();
  });

  it("connects to a provider, factory, token and router", () => {
    assert(provider._isProvider);

    expect(contractFactory.address).to.equal(
      "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"
    );

    expect(contractRouter.address).to.equal(
      "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
    );

    expect(contractToken.address).to.equal(
      "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
    );
  });

  it("gets the price of amountsOut", async () => {
    const amount = await getAmountOut();
    console.log(`Amount Out: ${amount}`);
    assert(amount);
  });

  it("sends a transaction, i.e., swaps a token", async () => {
    const [ownerSigner] = await ethers.getSigners(); // the first account generated by hardhat

    const mainnetForkUniswapRouter = new ethers.Contract(
      addressRouter,
      routerABI,
      ownerSigner
    );

    const myAddress = ownerSigner.address; // Using the owner's address directly from the signer
    console.log(myAddress);

    const amountOut = await getAmountOut();

    // Approve the Uniswap router to spend the token
    const approveTx = await contractToken
      .connect(ownerSigner)
      .approve(addressRouter, amountIn);
    await approveTx.wait();

    // Log balance before the transaction
    const balanceBefore = await ownerSigner.getBalance();
    console.log(
      `Balance before swap: ${ethers.utils.formatEther(balanceBefore)} ETH`
    );

    const txSwap = await mainnetForkUniswapRouter.swapExactTokensForTokens(
      amountIn, // amount In,
      amountOut, // amount Out,
      [addressFrom, addressTo], // path,
      myAddress, // address to,
      Date.now() + 1000 * 60 * 5, // deadline,
      {
        gasLimit: 200000,
        gasPrice: ethers.utils.parseUnits("50.5", "gwei"),
        type: 0, // Explicitly set the transaction type to 0 for legacy transactions
      }
    );

    assert(txSwap.hash);

    // Log balance after the transaction
    const balanceAfter = await ownerSigner.getBalance();
    console.log(
      `Balance after swap: ${ethers.utils.formatEther(balanceAfter)} ETH`
    );

    const mainnetForkProvider = waffle.provider;
    const txReceipt = await mainnetForkProvider.getTransactionReceipt(
      txSwap.hash
    );

    console.log("\nSWAP TRANSACTION");
    console.log(txSwap);

    console.log("\nTRANSACTION RECEIPT");
    console.log(txReceipt);
  });
});
